<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Never perform C-style cast between incompatible Class
pointers</title>
<link rel="stylesheet" href="../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../default.css" type="text/css">

<script type="text/JavaScript" src="../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "language/c/8002.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../index.html?page=source%2Flanguage%2Fc%2F8002.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../index.html?page=source%2Flanguage%2Fc%2F8002.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Never perform C-style cast between incompatible Class
pointers</h4>

<hr>

<h5>Technology</h5>

<p>C Language, C++</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>No</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>9</p>

<h5>Rationale</h5>

<p>Using an incompatible C-style cast between pointers to classes
is equivalent to using 'reinterpret_cast'. It totally silences the
type translation system, and will result in unpredictable behavior
with high risk of crash and/or memory corruption.</p>

<h5>Description</h5>

<p>This rule searches for C++ methods, constructors, and
destructors performing C-style casts between pointers to classes
that are not compatible. Note: Compatible classes belong to the
same class hierarchy. However, even to cast between those classes,
C-style casts are not the preferred solution: see rules #8058 and
#8060.</p>

<h5>Remediation</h5>

<p>If classes do not have any relationship: - Use 'void*' as an
intermediate type, and a 'static_cast' from 'void*' to the
destination type. - Or use a 'reinterpret_cast' instead. Be aware
that most of the time, 'reinterpret_cast' will lead to
unpredictable behavior. Its effects are _implementation-defined_
and not portable. Its use should be limited to low-level (close to
the hardware) programming. If classes belong to the same
inheritance tree, then for derived-to-base, see rule #8058, use
implicit type conversion, and for base-to-derived, see rule #8060,
use a 'dynamic_cast'.</p>

<h5>Sample</h5>

<pre>
class A 
{ 
    int i;
};

class B 
{
public:
    B() : p("Hello") { }
    std::string p;
};

int main()
{
    B * b = (B*) new A(); // VIOLATION. A is not a child/mother class of B
    std::cout &lt;&lt; b-&gt;p &lt;&lt; std::endl; // Probably a program crash
    return 0;
}
</pre>

<h5>Remediation sample</h5>

<pre>
In this example, there is no sensible way to use a pointer to 'A' as if it was a pointer to 'B'. We could silence this rule by using 'reinterpret_cast', but we could not make anything useful with 'b'.

If classes have a relationship, but the compiler does not know it, the same kind of problems can occur:

class A;
class B;

void f()
{
    A* a = (A*)new B();
}

class A 
{ 
public:
    virtual ~A();
};

class B : public A
{
};

Here, even if the classes are related, the compiler does not know it at the point of definition of the f function. This C-style cast will still be equivalent to a 'reinterpret_cast' and can be wrong (if you used a 'static_cast' the code would not compile, which is a good thing).
</pre>

<h5>Output</h5>

<p>Associated to each C++ method, constructor, and destructor with
violations, the Quality Rule provides: - The number of violation
patterns - Bookmarks for violation patterns found in source code: -
dangerous cast</p>

<h5>Total</h5>

<p>Number of C++ Methods, Constructors, and Destructors</p>

<h5>Metric ID</h5>

<p>8002</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("source/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>

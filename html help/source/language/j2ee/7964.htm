<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Avoid directly instantiating a Class used as a Spring
bean</title>
<link rel="stylesheet" href="../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../default.css" type="text/css">

<script type="text/JavaScript" src="../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "language/j2ee/7964.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../index.html?page=source%2Flanguage%2Fj2ee%2F7964.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../index.html?page=source%2Flanguage%2Fj2ee%2F7964.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Avoid directly instantiating a Class used as a Spring bean</h4>

<hr>

<h5>Technology</h5>

<p>JEE</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>Yes</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>9</p>

<h5>Rationale</h5>

<p>When a class is used to instantiate a Spring bean, this bean
benefits from different Spring key features: * Each bean is a
Spring component and can take advantage of all Spring services,
such as declarative transaction management * Each public bean's
method is added to the Spring container, so it's eligible for
injection into other objects, JMX export and other benefits. So, if
a class is instantiated as a Spring bean and as a direct Java
instance at the same time, for these two instances, you may see
different and unpredictable behavior.</p>

<h5>Description</h5>

<p>Reports Spring bean and Java methods that call a constructor of
the class used to define this Spring bean.</p>

<h5>Remediation</h5>

<p>Use only Spring beans and when you need different instances of
the same class, use the prototype mode attribute.</p>

<h5>Sample</h5>

<pre>
&lt;bean id="myBean" class="sample.MyBean"&gt;
  &lt;property name="url"&gt;
     &lt;value&gt;http://localhost/myBeanService&lt;/value&gt;
  &lt;/property&gt;
&lt;/bean&gt;

public class MyBean implements MyBeanInterface {
  private String url;

  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }
}

public class AnotherClass {
    MyBean bean;

    AnotherClass() {
      bean = new MyBean();   // VIOLATION
    }
}
</pre>

<h5>Remediation sample</h5>

<pre>
&lt;bean id="myBean" class="sample.MyBean"&gt;
    &lt;property name="url"&gt;
        &lt;value&gt;http://localhost/myBeanService&lt;/value&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="anotherClass" class="sample.AnotherClass"&gt; // FIXED
    &lt;property name="bean"&gt;
        &lt;value&gt;myBean&lt;/value&gt;
    &lt;/property&gt;
&lt;/bean&gt;

public class MyBean implements MyBeanInterface {
    private String url;

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }
}

public class AnotherClass {
    MyBeanInterface bean;
    
    public MyBeanInterface getBean() {
        return bean;
    }
    
    public void setBean(MyBeanInterface bean) {
        this.bean = bean;
    }
}
</pre>

<h5>Output</h5>

<p>This report lists Java methods that call a constructor of the
class used to implement a Spring bean and the Spring bean name It
provides the following information: - The full name of the methods
that invoke the constructor of a Spring implementation class - the
Spring bean name</p>

<h5>Total</h5>

<p>The number of methods that reference a Spring bean java
interface</p>

<h5>Metric ID</h5>

<p>7964</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("source/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>

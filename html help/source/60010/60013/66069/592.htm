<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Avoid Classes using "new" to allocate Instances but not
defining a copy Constructor</title>
<link rel="stylesheet" href="../../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../../default.css" type=
"text/css">

<script type="text/JavaScript" src="../../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "60010/60013/66069/592.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../../index.html?page=source%2F60010%2F60013%2F66069%2F592.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../../index.html?page=source%2F60010%2F60013%2F66069%2F592.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Avoid Classes using "new" to allocate Instances but not
defining a copy Constructor</h4>

<hr>

<h5>Technology</h5>

<p>C++</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>Yes</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>8</p>

<h5>Rationale</h5>

<p>A copy constructor is highly recommended to avoid surprises when
an object is initialized using an object of the same type. If an
object manages the allocation and deallocation of an object on the
heap (the managing object has a pointer to the object to be created
by the class' constructor), only the value of the pointer will be
copied. This can lead to two invocations of the destructor for the
same object (on the heap), probably resulting in a run-time
error.</p>

<h5>Description</h5>

<p>This rule searches for C++ classes using the "new" operator to
allocate instances but that do not define a copy constructor.</p>

<h5>Remediation</h5>

<p>Define a copy constructor for the class.</p>

<h5>Sample</h5>

<pre>
#include &lt;string.h&gt;

   class String
   {
      public:
         String( const char* cp = "");    // Constructor
         ~String();                       // Destructor
         // ...
      private:
         char* sp;
         // ...
   };

   String::String(const char* cp)      // Constructor
   {
      sp = new char[strlen(cp)];
      strcpy(sp,cp);
   }
   String::~String()    // Destructor
   {
      delete sp;
   }

   // "Dangerous" String class
   void
   main()
   {
      String w1;
      String w2 = w1;
      // WARNING: IN A BITWISE COPY OF w1::sp,
      // THE DESTRUCTOR FOR W1::SP WILL BE CALLED TWICE:
      // FIRST, WHEN w1 IS DESTROYED; AGAIN, WHEN w2 IS DESTROYED.
   }
</pre>

<h5>Remediation sample</h5>

<pre>
#include &lt;string.h&gt;

   class String
   {
      public:
         String( const char* cp = "");   // Constructor
         String( const String&amp; sp );     // Copy constructor
         ~String();                      // Destructor
         // ...
      private:
         char* sp;
         // ...
   };

   String::String( const char* cp )    // Constructor
   {
      sp = new char[strlen(cp)];
      strcpy(sp,cp);
   }

   String::String( const String&amp; stringA ) : sp( new char[strlen(stringA.sp)] )
   {
      strcpy(sp,stringA.sp);
   }
   String::~String()     // Destructor
   {
      delete sp;
   }

   // "Safe" String class
   void
   main()
   {
      String w1;
      String w2 = w1;   // SAFE COPY: String::String( const String&amp; ) CALLED.
   }
</pre>

<h5>Output</h5>

<p>Associated to each C++ class with violations, the Quality Rule
provides: - Bookmarks for violation patterns found in the source
code: - object instanciation</p>

<h5>Total</h5>

<p>Number of C++ classes</p>

<h5>Metric ID</h5>

<p>592</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("source/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>

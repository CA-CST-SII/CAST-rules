<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Avoid Form Field without Validator</title>
<link rel="stylesheet" href="../../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../../default.css" type=
"text/css">

<script type="text/JavaScript" src="../../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "60010/60016/66062/7416.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../../index.html?page=source%2F60010%2F60016%2F66062%2F7416.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../../index.html?page=source%2F60010%2F60016%2F66062%2F7416.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Avoid Form Field without Validator</h4>

<hr>

<h5>Technology</h5>

<p>JEE</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>Yes</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>9</p>

<h5>Rationale</h5>

<p>Input validation is required to secure an application. Moreover,
the web interface is exposed to anyone. Non validating input may
allow injecting arbitrary web script, HTML, SQL... Consequences can
be severe, like erasing the content of a database. Only one
invalidated input can be exploited by an attacker. Note that unused
fields should be constrained so that they can only be empty or
undefined. If unused fields are not validated, shared business
logic in an action may allow attackers to bypass the validation
checks that are performed for other uses of the form.</p>

<h5>Description</h5>

<p>This metric reports all forms with fields that are not
validated. Forms taken into account are forms defined as form-bean
in the struts-config.xml (it can be a regular form bean or a
dynamic form bean). Note that in the case where the form is shared
among multiple actions, the validation declaration of the form will
be associated to the action. Note that in a case of a dynamic
form-bean, the fields are declared in the struts-config.xml while
the fields of regular form-bean are defined in the implementation
class itself and deduced from the setters of the class. Note that a
form bean can be associated to several form validator. In this
case, a field will be considered as validated when all form
validator validate this field. This case may happen when the
validator form is associated to action mapping or when
internationalization is used. Note that in the case a form bean is
not associated to any validator form all its fields or setter
methods will be reported.</p>

<h5>Remediation</h5>

<p>Validate each field of a form. When a form is shared among
different action, you have to use the type
org.apache.struts.validator.DynaValidatorActionForm for your Form
Bean definition in the struts-config.xml file to be able to define
a specific validation for each action.</p>

<h5>Reference</h5>

<p>http://cwe.mitre.org/data/definitions/105.html
http://www.owasp.org/index.php/2004_Updates_OWASP_Top_Ten_Project</p>

<h5>Sample</h5>

<pre>
====&gt;  For concrete Form Bean

--&gt; logonForm.java (for concrete Form Bean) :
public class LogonForm extends ValidatorForm {
  private String username;
  private String password;
  
  public String getUsername() {
    return username;
  }
  
  public void setUsername(String username) {
    this.username = username;
  }

  public String getPassword() {
    return password;
  }

public void setPassword(String password) {
    this.password = password;
  }
}

--&gt; struts-config.xml (for concrete Form Bean)
&lt;form-beans&gt;
  &lt;form-bean name="logonForm"
            type="com.cast.struts.sample.LogonForm"/&gt;
&lt;/form-beans&gt;

====&gt;  for dynamic Form Bean
--&gt; struts-config.xml (for dynamic Form Bean)
&lt;form-beans&gt;
  &lt;form-bean name="logonForm"
            type="org.apache
.struts.validator.DynaValidatorForm"&gt;
    &lt;form-property name="username"
            type="java.lang.String"/&gt;
    &lt;form-property name="password"
            type="java.lang.String"/&gt;
  &lt;/form-bean&gt;
&lt;/form-beans&gt;

====&gt;  for both dynamic and concrete Form Bean

--&gt; validation.xml:

&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="logonForm"&gt; // VIOLATION: password field is not validated
      &lt;field property="username" 
            depends="required"&gt;
        &lt;arg0 key="prompt.username"/&gt;
      &lt;/field&gt;
    &lt;/form&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>

<h5>Remediation sample</h5>

<pre>
----&gt; validation.xml:

&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="logonForm"&gt;
      &lt;field property="username" 
            depends="required"&gt;
        &lt;arg0 key="prompt.username"/&gt;
      &lt;/field&gt;
      &lt;field property="password" // FIXED
            depends="required"&gt;
        &lt;arg0 key="prompt.password"/&gt;
      &lt;/field&gt;
    &lt;/form&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>

<h5>Output</h5>

<p>This report lists all form bean fields that are not validated:
setter method in case of regular form bean and form field declared
in the struts-config.xml file for dynamic form-bean. It provides
the following information: - Form Name - Field Name or - Java
Method Full Name NOTE: in the case of Java method reported, the
field to add in validator.xml is deduced from the method name using
Java Bean convention.</p>

<h5>Total</h5>

<p>The number of all form fields or Java setter methods, when
defined with struts or 0 if no object of type "Struts Configuration
File" is present</p>

<h5>Metric ID</h5>

<p>7416</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("source/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>

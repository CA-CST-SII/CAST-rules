<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Use lazy fetching for collection</title>
<link rel="stylesheet" href="../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../default.css" type="text/css">

<script type="text/JavaScript" src="../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "60005/61019/7488.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../index.html?page=source%2F60005%2F61019%2F7488.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../index.html?page=source%2F60005%2F61019%2F7488.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Use lazy fetching for collection</h4>

<hr>

<h5>Technology</h5>

<p>JEE</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>Yes</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>9</p>

<h5>Rationale</h5>

<p>In a lazy association, the associated object or collection is
fetched when it's first accessed. This results in a new request to
the database (unless the associated object is cached). This option
is almost always used for collection mappings (it should be the
default, and we recommend that you consider it as a default for all
your collection mappings). Generally, the performance benefits are
such that you will want to use lazy instantiation wherever possible
(compared with the massive task of reading in all of the entities
concerned) When eager fetching is used, the associated object or
collection is fetched together with the owning object, using an SQL
outer join, and no further database request is required. But the
issue is that it will always be done like this and if the number of
row is high, the performance will be affected. It is more common to
specify the use of this strategy (eager fetching) at runtime for a
particular HQL or criteria query to avoid that a lazy fetching
requires several queries.</p>

<h5>Description</h5>

<p>Reports all collection association (set, list, bag, idbag, map)
that don't use lazy fetching strategy. This strategy is set through
the lazy property set to "true".</p>

<h5>Remediation</h5>

<p>When the table contains lot of rows, it is better to use a lazy
fetching strategy and use a eager strategy at runtime for a
particular HQL query, criteria query or JPQL query to avoid that
the lazy fetching requires several queries.</p>

<h5>Reference</h5>

<p>Hibernate in Action (ISBN 1932394-15-X) p 148</p>

<h5>Sample</h5>

<pre>
&lt;hibernate-mapping &gt;
  
  &lt;class name="A" table ="A"&gt; 
    &lt;id name="id"&gt;
      &lt;generator class="increment"/&gt;
    &lt;/id&gt;

    // VIOLATION (it could have been lazy = "false")
    &lt;set name="b_items" table ="B"&gt; 
      &lt;key column="B_ID"/&gt;
      &lt;one-to-many class="B"/&gt;
    &lt;/array&gt;
  &lt;/class&gt;

&lt;/hibernate-mapping&gt;
</pre>

<h5>Remediation sample</h5>

<pre>
&lt;hibernate-mapping &gt;
  
  &lt;class name="A" table ="A"&gt; 
    &lt;id name="id"&gt;
      &lt;generator class="increment"/&gt;
    &lt;/id&gt;

    // FIXED
    &lt;set name="b_items" lazy="true" table ="B"&gt; 
      &lt;key column="B_ID"/&gt;
      &lt;one-to-many class="B"/&gt;
    &lt;/array&gt;
  &lt;/class&gt;

&lt;/hibernate-mapping&gt;
</pre>

<h5>Output</h5>

<p>List all Hibernate Entity Property and JPA Entity Property of
type collection that does not use lazy fetching. It provides the
following information: Hibernate Entity Property Full Name or JPA
Entity Property Full Name</p>

<h5>Total</h5>

<p>number of Hibernate Entity Property or JPA Entity Property of
type collection</p>

<h5>Metric ID</h5>

<p>7488</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("source/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>

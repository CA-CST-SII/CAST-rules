<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Avoid local variables that are not initialized at
declaration time</title>
<link rel="stylesheet" href="../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../default.css" type="text/css">

<script type="text/JavaScript" src="../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "language/c/7998.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../index.html?page=cast%20rules%2Flanguage%2Fc%2F7998.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../index.html?page=cast%20rules%2Flanguage%2Fc%2F7998.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Avoid local variables that are not initialized at declaration
time</h4>

<hr>

<h5>Technology</h5>

<p>C Language, C++</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>No</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>5</p>

<h5>Rationale</h5>

<p>Using a variable that is not initialized can lead to unexpected
behavior. Some compilers may detect the use of uninitialized
variables in some cases, but none can detect them all. For example
the following sample remains undetected: void take_ptr(int * ptr) {
printf("%lx", *ptr); } void main() { int c; take_ptr(&amp;c); }</p>

<h5>Description</h5>

<p>This rule searches for C++ functions, methods, constructors, and
destructors where at least one local variable is not initialized at
declaration time. This applies to standard types ('char', 'int',
etc) and pointers of any type. This does not apply to: - classes
(i.e. local declarations like: 'myclass var;') as they have a
constructor - structs and arrays Variables that are initialized
after their declaration are considered as initialized as long as
this is done before any program logic.</p>

<h5>Remediation</h5>

<p>See samples and remediation samples.</p>

<h5>Reference</h5>

<p>"Black Hat Federal 2006 : Attack on uninitialized
Variables":http://www.blackhat.com/presentations/bh-europe-06/bh-eu-06-Flake.pdf</p>

<h5>Sample</h5>

<pre>
// SAMPLE 1: Basic example
int main()
{
    int c; // VIOLATION
}

// SAMPLE 2: Non violations
void main()
{
     int c;
     c = 0; // is NOT considered as a violation

     double d = f(); // not a violation
}

// SAMPLE 3: Initialization in branch
// Initialization done in conditional branching or in a called method are considered as a violation.

void main()
{
     int i;
     if (...)
         i = 3; // VIOLATION
}

// SAMPLE 4: Use in function call

void f( int * p) { *p = 3; }

void g() 
{
      int i;
      f( &amp;i); // VIOLATION
}
</pre>

<h5>Remediation sample</h5>

<pre>
// SAMPLE 1: Basic example
int main()
{
 int c = 0;
}

// SAMPLE 3: Initialization in branch
// Initialization done in conditional branching or in a called method are considered as a violation.

void main()
{
     int i = 0; // REMEDIATION
     if (...)
         i = 3; 
} 

// SAMPLE 4: Use in function call
// Although this usage is safe, we cannot know it in 'g' until we read the body of 'f'. If the implementation of 'f' changes, calling 'g' may become invalid. It is safer to initialize 'i' in 'g':

void f( int * p) { *p = 3; }

void g() 
{
      int i = 0; // REMEDIATION
      f( &amp;i);
}
</pre>

<h5>Output</h5>

<p>Associated to each C++ Function/Method/Constructor/Destructor
with violations, the Quality Rule provides: - Number of violation
patterns - Bookmarks for violation patterns found in the source
code: - Uninitialized variable</p>

<h5>Total</h5>

<p>Number of C++ Functions, Methods, Constructors, and
Destructors</p>

<h5>Metric ID</h5>

<p>7998</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("cast rules/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>

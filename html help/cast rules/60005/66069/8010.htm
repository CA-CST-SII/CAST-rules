<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Do not overload the ampersand, comma, logical AND or logical
OR operators</title>
<link rel="stylesheet" href="../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../default.css" type="text/css">

<script type="text/JavaScript" src="../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "60005/66069/8010.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../index.html?page=cast%20rules%2F60005%2F66069%2F8010.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../index.html?page=cast%20rules%2F60005%2F66069%2F8010.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Do not overload the ampersand, comma, logical AND or logical OR
operators</h4>

<hr>

<h5>Technology</h5>

<p>C++</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>No</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>5</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>6</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>5</p>

<h5>Rationale</h5>

<p>Depending on the operator involved, the rationale is a variation
of the same theme: the overloaded operator does not have the same
behavior as the classical operator, therefore using it could be
surprising and lead to subtle bugs. * Logical OR and AND operators
The logical AND and logical OR operators (&amp;&amp;, ||) exhibit
"short circuit" operation. That is, the second operand is not
evaluated if the result can be deduced solely by evaluating the
first operand. However, short-circuit evaluation is not possible
for overloaded versions of these operators. Therefore, to avoid
possibly confusing behavior, these operators should not be
overloaded. * Comma Operator The built-in comma operator guarantees
that the first operand is evaluated before the second operand.
However, if the comma operator is overloaded, its operand
evaluation depends on C++'s function parameter mechanism, which
does not guarantee the order of evaluation. Therefore, to avoid
possibly confusing behavior, the comma operator should not be
overloaded. * Ampersand Operator The C++ standard [ISO/IEC
14882-2003] says in Section 5.3.1 paragraph 4 that "The address of
an object of incomplete type can be taken, but if the complete type
of that object is a class type that declares operator&amp;() as a
member function, then the behavior is undefined." Therefore, to
avoid possible undefined behavior, the operator &amp; should not be
overloaded. The operators taken into account are unary operators,
i.e. operators defined in a class with no argument and operators
defined outside of a class with one argument. Binary operators
(defined in a class with one parameter or out side of a class with
two parameters) are not considered here.</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>6</p>

<h5>Rationale</h5>

<p>Depending on the operator involved, the rationale is a variation
of the same theme: the overloaded operator does not have the same
behavior as the classical operator, therefore using it could be
surprising and lead to subtle bugs. * Logical OR and AND operators
The logical AND and logical OR operators (&amp;&amp;, ||) exhibit
"short circuit" operation. That is, the second operand is not
evaluated if the result can be deduced solely by evaluating the
first operand. However, short-circuit evaluation is not possible
for overloaded versions of these operators. Therefore, to avoid
possibly confusing behavior, these operators should not be
overloaded. * Comma Operator The built-in comma operator guarantees
that the first operand is evaluated before the second operand.
However, if the comma operator is overloaded, its operand
evaluation depends on C++'s function parameter mechanism, which
does not guarantee the order of evaluation. Therefore, to avoid
possibly confusing behavior, the comma operator should not be
overloaded. * Ampersand Operator The C++ standard [ISO/IEC
14882-2003] says in Section 5.3.1 paragraph 4 that "The address of
an object of incomplete type can be taken, but if the complete type
of that object is a class type that declares operator&amp;() as a
member function, then the behavior is undefined." Therefore, to
avoid possible undefined behavior, the operator &amp; should not be
overloaded. The operators taken into account are unary operators,
i.e. operators defined in a class with no argument and operators
defined outside of a class with one argument. Binary operators
(defined in a class with one parameter or out side of a class with
two parameters) are not considered here.</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>5</p>

<h5>Description</h5>

<p>This rule searches for C++ operators that are overloaded. The
list of operators that are checked is as follows: - ampersand
('&amp;') - comma (',') - logical AND ('&amp;&amp;') - logical OR
('||')</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>6</p>

<h5>Description</h5>

<p>This rule searches for C++ operators that are overloaded. The
list of operators that are checked is as follows: - ampersand
('&amp;') - comma (',') - logical AND ('&amp;&amp;') - logical OR
('||')</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>5</p>

<h5>Remediation</h5>

<p>To avoid possibly confusing behavior, these operators should not
be overloaded.</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>6</p>

<h5>Remediation</h5>

<p>To avoid possibly confusing behavior, these operators should not
be overloaded.</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>5</p>

<h5>Reference</h5>

<p>"CERT: Do not overload the ampersand, comma, logical AND or
logical OR
operators":https://www.securecoding.cert.org/confluence/display/cplusplus/DCL10-CPP.+Do+not+overload+the+ampersand,+comma,+logical+AND+or+logical+OR+operators</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>6</p>

<h5>Reference</h5>

<p>"CERT: Do not overload the ampersand, comma, logical AND or
logical OR
operators":https://www.securecoding.cert.org/confluence/display/cplusplus/DCL10-CPP.+Do+not+overload+the+ampersand,+comma,+logical+AND+or+logical+OR+operators</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>5</p>

<h5>Output</h5>

<p>Associated to each C++ operators in violation, the Quality Rule
provides: - Bookmarks for violation patterns found in the source
code: - Operator</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>6</p>

<h5>Output</h5>

<p>Associated to each C++ operators in violation, the Quality Rule
provides: - Bookmarks for violation patterns found in the source
code: - Operator</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>5</p>

<h5>Total</h5>

<p>Number of C++ overloaded operators</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>6</p>

<h5>Total</h5>

<p>Number of C++ overloaded operators</p>

<h5>Metric ID</h5>

<p>8010</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("cast rules/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>

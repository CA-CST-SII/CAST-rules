<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Avoid defining singleton or factory when using
Spring</title>
<link rel="stylesheet" href="../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../default.css" type="text/css">

<script type="text/JavaScript" src="../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "60005/66009/7716.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../index.html?page=cast%20rules%2F60005%2F66009%2F7716.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../index.html?page=cast%20rules%2F60005%2F66009%2F7716.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Avoid defining singleton or factory when using Spring</h4>

<hr>

<h5>Technology</h5>

<p>JEE</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>No</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>7</p>

<h5>Rationale</h5>

<p>On large software applications, the number of factory classes
can become quite large. There is lot of code duplication because
constructors are private and the usage of static methods and
variables make the class not extendable. Thus very singleton must
re-implement the same basic structure. Spring provides a core
factory pattern, which eliminates the need to manually program
factory objects (usually realized as singletons). It allows you to
decouple the configuration and specification of dependencies from
your actual program logic. You will remove the need of your own
glue code and gain a much more robust factory implementation with
better error handling and fully de-coupled configuration mechanism
It will also avoid to fall into the classic double-checked locking
issue where you can easily have more than one singleton instance
when invoked into a multi-threaded application.</p>

<h5>Description</h5>

<p>Reports all JAVA singleton and factory. A singleton is defined
as: - a class with a static member with the same type as the class
- a static method that refers the instance and return an object of
same or a parent type (extended or implemented) - a class that has
only private constructors A factory is defined as: - a class with a
public static method that return a Java interface - a class that
has only private or protected constructors</p>

<h5>Remediation</h5>

<p>Define a factory or singleton using Spring framework</p>

<h5>Reference</h5>

<p>http://www.devx.com/Java/Article/21665/1763/page/2
http://www.javapassion.com/j2ee/springhelloworld.pdf
http://wiki.java.net/bin/view/Javapedia/Singleton
http://java.sun.com/developer/JDCTechTips/2006/tt0113.html#1
http://static.springframework.org/spring/docs/2.0.x/reference/beans.html#beans-factory-scopes-singleton</p>

<h5>Sample</h5>

<pre>
-----&gt; MyInterface.java
interface MyInterface {
  public String getAName();
}
-----&gt; MyConcrete.java
class MyConcrete extends MyInterface {
  public MyConcrete() {
    ...
  }
  public String getAName() {
    ...
  }
}
-----&gt; MyFactory.java
// VIOLATION: the factory pattern is detected
class MyFactory {
  private MyFactory() {
    ...
  }
  public static MyInterface getMyInterface () {
    ...
  }
}
----&gt; Java Client code
MyInterface theInterface = MyFactory.getMyInterface ();
String name = theInterface.getAName();
</pre>

<h5>Remediation sample</h5>

<pre>
----&gt; Spring XML file
// FIXED with Spring
&lt;beans&gt;
     &lt;bean name="theInterface"
          class="MyConcrete"&gt;
&lt;/beans&gt;

----&gt; Java Client code
InputStream is = new FileInputStream("spring_beans.xml");
BeanFactory factory = new XmlBeanFactory(is);

MyInterface theInterface = (MyInterface) factory.getBean("theInterface");
String name = theInterface.getAName();
</pre>

<h5>Output</h5>

<p>The metric will list singleton or factories classes when Spring
is used. It provides the following information: Class Full Name</p>

<h5>Total</h5>

<p>The total will be the total of JAVA singleton, factory and
Spring beans, 0 if Spring is not used</p>

<h5>Metric ID</h5>

<p>7716</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("cast rules/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>

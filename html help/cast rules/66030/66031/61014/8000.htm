<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Avoid 'catch-all' statement</title>
<link rel="stylesheet" href="../../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../../default.css" type=
"text/css">

<script type="text/JavaScript" src="../../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "66030/66031/61014/8000.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../../index.html?page=cast%20rules%2F66030%2F66031%2F61014%2F8000.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../../index.html?page=cast%20rules%2F66030%2F66031%2F61014%2F8000.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Avoid 'catch-all' statement</h4>

<hr>

<h5>Technology</h5>

<p>C++</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>No</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>6</p>

<h5>Rationale</h5>

<p>Directly catching all exceptions (except for 'main()' functions
to catch unknown errors) means that the try/catch will process all
the exceptions in the same way: 'RuntimeException' will be
processed in the same way as application specific exceptions such
as 'BankingException' or 'CredentialException'. This will prevent
the application from carrying out the specific recovery process
that is needed and as a consequence will threaten both application
robustness and security. In addition, an exception carries some
additional information on the error conditions. For example, an
exception derived from 'std::exception' contains an error message
that is returned by the 'what()' function. In a 'catch(...)', all
type information about the exception is lost, as well as all
additional data provided with the exception. There are only two
actions that can be taken after a 'catch(...)': - Unconditionally
accept the exception, pretending it has never been thrown. This is
very bad practice and will most probably produce errors that are
very hard to understand and with lots of consequences (for
instance, silencing an I/O error may lead to user data loss). -
Break the normal execution of the program, saying that an unknown
error has happened (stop the program, automatically restart the
program, put the hardware in safe-mode...). This is usually only
useful close to the top level of the program, for instance in the
'main()' function. One usage pattern for which 'catch(...)' might
seem useful is for doing resource cleanup when an exception is
thrown, and then re-throw the exception, trying to emulate the use
of 'finally' in C++. However, the usage of
"RAII":http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization
is a preferred solution to resource cleanup, it is safer to use and
requires less work from the developer.</p>

<h5>Description</h5>

<p>This rule searches for methods catching all exceptions (i.e.
using the 'catch (...)' statement).</p>

<h5>Remediation</h5>

<p>Except for 'main()' or other top-level functions, always use the
appropriate type of catch and specific recovery code.</p>

<h5>Sample</h5>

<pre>
try
{ /*...*/ }
catch (...) // &lt;= VIOLATION
{ /*...*/ }
</pre>

<h5>Remediation sample</h5>

<pre>
try
{ /*...*/ }
catch (SpecificException &amp;e) 
{ /*...*/ }
</pre>

<h5>Output</h5>

<p>Associated to each C++ method with violations, the Quality Rule
provides: - the number of violation patterns - Bookmarks for
violation patterns found in the source code: - catch (...)</p>

<h5>Total</h5>

<p>Number of C++ methods and functions</p>

<h5>Metric ID</h5>

<p>8000</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("cast rules/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>

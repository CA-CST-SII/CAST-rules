<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />

<meta http-equiv="Content-Language" content="en">
<title>Close the outermost stream ASAP</title>
<link rel="stylesheet" href="../../../../files/helpindex.css" type=
"text/css">
<link rel="stylesheet" href="../../../../default.css" type=
"text/css">

<script type="text/JavaScript" src="../../../../files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "66030/66031/61018/8108.htm";
</script>

</head>
<body><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"../../../../index.html?page=cast%20rules%2F66030%2F66031%2F61018%2F8108.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"../../../../index.html?page=cast%20rules%2F66030%2F66031%2F61018%2F8108.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->

<h4>Close the outermost stream ASAP</h4>

<hr>

<h5>Technology</h5>

<p>JEE</p>

<h5>Unified Status</h5>

<p>N/A</p>

<h5>XXL Status</h5>

<p>N/A</p>

<h5>Critical Quality Rule</h5>

<p>Yes</p>

<h5>Weight in Parent Tech. Criterion</h5>

<p>8</p>

<h5>Rationale</h5>

<p>A frequent issue when dealing with stream is resource leak. This
mainly comes from an incorrect code that miss to close the stream
in any cases. Incorrect resource management is a common source of
failures in production applications, with the usual pitfalls being
database connections and file descriptors remaining opened after an
exception has occurred somewhere else in the code. This leads to
application servers being frequently restarted when resource
exhaustion occurs, because operating systems and server
applications generally have an upper-bound limit for resources.</p>

<h5>Description</h5>

<p>Reports methods that open a stream in the body and that: -
doesn't close the outermost stream in a finally block. Note that
the number of calls to open a stream and the methods in the finally
must be the same. - or doesn't annotate this stream with @Cleanup
annotation (lombok.Cleanup) - or doesn't use the try with resource
to declare the stream that must be closed The following objects are
taken into account: - output streams - input streams - readers -
writers - channel</p>

<h5>Remediation</h5>

<p>You can: - use the try with resource to declare the resource
that must be closed (available in java 7) - or close the resource
in a finally block. - or annotate this resource with @Cleanup
annotation (lombok.Cleanup)</p>

<h5>Reference</h5>

<p>
http://stackoverflow.com/questions/15405396/is-it-necessary-to-close-input-output-streams-created-from-a-sockets-io-streams
http://www.oracle.com/technetwork/articles/java/trywithresources-401775.html</p>

<h5>Sample</h5>

<pre>
private void incorrectWriting() throws IOException {
    DataOutputStream out = new DataOutputStream(new FileOutputStream("data"));
    out.writeInt(666);
    out.writeUTF("Hello");
    out.close();
} // VIOLATION
</pre>

<h5>Remediation sample</h5>

<pre>
with finally
~~~~~~~~~~~~   
private void correctWriting() throws IOException {
    DataOutputStream out = null;
    try {
        out = new DataOutputStream(new FileOutputStream("data"));
        out.writeInt(666);
        out.writeUTF("Hello");
    } finally {
        if (out != null) {
            out.close(); // FIX
        }
    }        
}

with Java 7
~~~~~~~~~~~
private void writingWithARM() throws IOException {
    try (DataOutputStream out 
            = new DataOutputStream(new FileOutputStream("data"))) { // FIX
        out.writeInt(666);
        out.writeUTF("Hello");
    }
}

with @Cleanup annotation
~~~~~~~~~~~~~~~~~~~~~~~~
private void writingWithCleanup() throws IOException {
    @Cleanup DataOutputStream out = new DataOutputStream(new FileOutputStream("data")); // FIX
    out.writeInt(666);
    out.writeUTF("Hello");
}
</pre>

<h5>Output</h5>

<p>This report lists all methods that do not close the outermost
stream they opened It provides the following information: - method
full name</p>

<h5>Total</h5>

<p>All the methods that open a stream in the body</p>

<h5>Metric ID</h5>

<p>8108</p>

<hr>

<p align="right"><a href="http://www.castsoftware.com" target=
"_blank"><img border="0" src="../../../cast.gif" alt="CAST Website"
width="174" height="21"></a>
</p>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("cast rules/" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
